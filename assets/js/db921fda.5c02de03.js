"use strict";(self.webpackChunkscaffold_stellar=self.webpackChunkscaffold_stellar||[]).push([[788],{2707:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"registry","title":"Registry Guide","description":"The Stellar Registry is a system for publishing, deploying, and managing smart contracts on the Stellar network. This guide explains how to use the registry CLI tools to manage your contracts.","source":"@site/docs/registry.md","sourceDirName":".","slug":"/registry","permalink":"/docs/registry","draft":false,"unlisted":false,"editUrl":"https://github.com/theahaco/scaffold-stellar/tree/main/docs/docs/docs/registry.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Environment Configuration","permalink":"/docs/environments"},"next":{"title":"Deployment","permalink":"/docs/deploy"}}');var t=s(4848),i=s(8453);const l={sidebar_position:5},o="Registry Guide",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Commands",id:"commands",level:2},{value:"Publish Contract",id:"publish-contract",level:3},{value:"Deploy Contract",id:"deploy-contract",level:3},{value:"Install Contract",id:"install-contract",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Example Workflow",id:"example-workflow",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Registry Contract Addresses",id:"registry-contract-addresses",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"registry-guide",children:"Registry Guide"})}),"\n",(0,t.jsx)(n.p,{children:"The Stellar Registry is a system for publishing, deploying, and managing smart contracts on the Stellar network. This guide explains how to use the registry CLI tools to manage your contracts."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The registry system consists of two main components:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The on-chain registry contract (deployed on testnet)"}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"stellar-registry"})," CLI tool for interacting with the registry"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Install the registry CLI:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cargo install --git https://github.com/theahaco/scaffold-stellar stellar-registry-cli\n"})}),"\n",(0,t.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,t.jsx)(n.h3,{id:"publish-contract",children:"Publish Contract"}),"\n",(0,t.jsx)(n.p,{children:"Publish a compiled contract to the Stellar Registry:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"stellar registry publish \\\n  --wasm <PATH_TO_WASM> \\\n  [--author <AUTHOR_ADDRESS>] \\\n  [--wasm-name <NAME>] \\\n  [--binver <VERSION>] \\\n  [--dry-run]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--wasm"}),": Path to the compiled WASM file (required)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--author (-a)"}),": Author address (optional, defaults to the configured source account)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--wasm-name"}),": Name for the published contract (optional, extracted from contract metadata if not provided)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--binver"}),": Binary version (optional, extracted from contract metadata if not provided)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--dry-run"}),": Simulate the publish operation without actually executing it (optional)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"deploy-contract",children:"Deploy Contract"}),"\n",(0,t.jsx)(n.p,{children:"Deploy a published contract with optional initialization parameters:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"stellar registry deploy \\\n  --contract-name <DEPLOYED_NAME> \\\n  --wasm-name <PUBLISHED_NAME> \\\n  [--version <VERSION>] \\\n  -- \\\n  [CONSTRUCTOR_FUNCTION] [CONSTRUCTOR_ARGS...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--contract-name"}),": The name to give this contract instance (required)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--wasm-name"}),": The name of the previously published contract to deploy (required)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--version"}),": Specific version of the published contract to deploy (optional, defaults to most recent version)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CONSTRUCTOR_FUNCTION"}),": Optional constructor function name if contract implements initialization"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CONSTRUCTOR_ARGS"}),": Optional arguments for the constructor function"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Note: Use ",(0,t.jsx)(n.code,{children:"--"})," to separate CLI options from constructor function and arguments."]}),"\n",(0,t.jsx)(n.h3,{id:"install-contract",children:"Install Contract"}),"\n",(0,t.jsxs)(n.p,{children:["Install a deployed contract as an alias to be used by ",(0,t.jsx)(n.code,{children:"stellar-cli"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"stellar registry create-alias <CONTRACT_NAME>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CONTRACT_NAME"}),": Name of the deployed contract to install (required)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"The registry CLI respects the following environment variables:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"STELLAR_REGISTRY_CONTRACT_ID"}),": Override the default registry contract ID"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"STELLAR_NETWORK"}),': Network to use (e.g., "testnet", "mainnet")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"STELLAR_RPC_URL"}),": Custom RPC endpoint (default: ",(0,t.jsx)(n.a,{href:"https://soroban-testnet.stellar.org:443",children:"https://soroban-testnet.stellar.org:443"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"STELLAR_NETWORK_PASSPHRASE"}),": Network passphrase (default: Test SDF Network ; September 2015)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"STELLAR_ACCOUNT"}),": Source account to use"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These variables can also be in a ",(0,t.jsx)(n.code,{children:".env"})," file in the current working directory."]}),"\n",(0,t.jsxs)(n.p,{children:["You can also configure ",(0,t.jsx)(n.code,{children:"stellar-cli"})," defaults:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"stellar keys use alice\nstellar network use testnet\n"})}),"\n",(0,t.jsx)(n.h2,{id:"example-workflow",children:"Example Workflow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Publish a contract:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'stellar registry publish \\\n  --wasm path/to/token.wasm \\\n  --wasm-name token \\\n  --binver "1.0.0"\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Deploy the published contract with initialization:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'stellar registry deploy \\\n  --contract-name my-token \\\n  --wasm-name token \\\n  --version "1.0.0" \\\n  -- \\\n  initialize \\\n  --name "My Token" \\\n  --symbol "MTK" \\\n  --decimals 7\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Install the deployed contract locally:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"stellar registry create-alias my-token\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:["Use the installed contract with ",(0,t.jsx)(n.code,{children:"stellar-cli"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"stellar contract invoke --id my-token -- --help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Use descriptive contract and wasm names that reflect the contract's purpose"}),"\n",(0,t.jsx)(n.li,{children:"Follow semantic versioning for your contract versions"}),"\n",(0,t.jsx)(n.li,{children:"Always test deployments on testnet before mainnet"}),"\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.code,{children:"--dry-run"})," flag to simulate operations before executing them"]}),"\n",(0,t.jsx)(n.li,{children:"Document initialization parameters used for each deployment"}),"\n",(0,t.jsxs)(n.li,{children:["Use environment variables or ",(0,t.jsx)(n.code,{children:".env"})," files for different network configurations"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"registry-contract-addresses",children:"Registry Contract Addresses"}),"\n",(0,t.jsx)(n.p,{children:"The registry contract is deployed at different addresses for each network:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testnet"}),": ",(0,t.jsx)(n.code,{children:"CBCOGWBDGBFWR5LQFKRQUPFIG6OLOON35PBKUPB6C542DFZI3OMBOGHX"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mainnet"}),": ",(0,t.jsx)(n.code,{children:"CC3SILHAJ5O75KMSJ5J6I5HV753OTPWEVMZUYHS4QEM2ZTISQRAOMMF4"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Futurenet"}),": ",(0,t.jsx)(n.code,{children:"CACPZCQSLEGF6QOSBF42X6LOUQXQB2EJRDKNKQO6US6ZZH5FD6EB325M"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Contract name already exists"}),": Contract names must be unique within the registry. Choose a different name or check if you own the existing contract."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Version must be greater than current"}),": When publishing updates, ensure the new version follows semantic versioning and is greater than the currently published version."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Authentication errors"}),": Ensure your source account has sufficient XLM balance and is properly configured."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Network configuration"}),": Verify your network settings match the intended deployment target (testnet vs mainnet)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For more detailed information about the available commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"stellar registry --help\nstellar registry <command> --help\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);