"use strict";(self.webpackChunkscaffold_stellar=self.webpackChunkscaffold_stellar||[]).push([[486],{2272:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"environments","title":"Environment Configuration","description":"Scaffold Stellar uses an environments.toml file to manage different deployment environments and contract configurations.","source":"@site/docs/environments.md","sourceDirName":".","slug":"/environments","permalink":"/scaffold-stellar/docs/environments","draft":false,"unlisted":false,"editUrl":"https://github.com/theahaco/scaffold-stellar/tree/main/docs/docs/docs/environments.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"CLI Commands","permalink":"/scaffold-stellar/docs/cli"},"next":{"title":"Registry Guide","permalink":"/scaffold-stellar/docs/registry"}}');var i=t(4848),r=t(8453);const a={sidebar_position:4},c="Environment Configuration",s={},l=[{value:"Configuration File Structure",id:"configuration-file-structure",level:2},{value:"Network Configuration",id:"network-configuration",level:2},{value:"Account Configuration",id:"account-configuration",level:2},{value:"Contract Configuration",id:"contract-configuration",level:2},{value:"Configuration Options",id:"configuration-options",level:3},{value:"<code>client</code> (boolean, default: true)",id:"client-boolean-default-true",level:4},{value:"<code>id</code> (string, optional)",id:"id-string-optional",level:4},{value:"<code>constructor_args</code> (string, optional)",id:"constructor_args-string-optional",level:4},{value:"<code>after_deploy</code> (string, optional)",id:"after_deploy-string-optional",level:4},{value:"Example Configurations",id:"example-configurations",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Usage",id:"usage",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"environment-configuration",children:"Environment Configuration"})}),"\n",(0,i.jsxs)(e.p,{children:["Scaffold Stellar uses an ",(0,i.jsx)(e.code,{children:"environments.toml"})," file to manage different deployment environments and contract configurations."]}),"\n",(0,i.jsx)(e.h2,{id:"configuration-file-structure",children:"Configuration File Structure"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:'[development]\nnetwork = {\n    name = "standalone",            # use local network\n    run_locally = true              # start up the local docker container\n}\naccounts = ["account1", "account2"] # Account aliases to create\n\n[staging]\nnetwork = {\n    name = "testnet",               # Use Stellar testnet\n}\n\n[production]\nnetwork = {\n    name = "mainnet",               # Use Stellar mainnet\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"network-configuration",children:"Network Configuration"}),"\n",(0,i.jsx)(e.p,{children:"Each environment can specify network settings:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:'network = {\n    name = "<network-name>",           # Optional: Use predefined network (mainnet/testnet/standalone)\n    rpc_url = "<url>",                # Optional: Custom RPC endpoint\n    network_passphrase = "<phrase>",   # Optional: Network passphrase\n    rpc_headers = [["key", "value"]], # Optional: Custom RPC headers\n    run_locally = false               # Optional: Whether to run local network (default: false)\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"account-configuration",children:"Account Configuration"}),"\n",(0,i.jsx)(e.p,{children:"Configure accounts for contract deployment and testing:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:'accounts = [\n    "account1",                        # Simple account alias\n    { name = "admin", default = true } # Account with additional settings\n]\n'})}),"\n",(0,i.jsx)(e.h2,{id:"contract-configuration",children:"Contract Configuration"}),"\n",(0,i.jsx)(e.p,{children:"Configure smart contracts for each environment:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:'[development.contracts.my_contract]\nclient = true                      # Generate TypeScript client (default: true)\nconstructor_args = """             # Initialization script if needed\n    --arg1 param1 --arg2 param2\n"""\nafter_deploy = """                 # contract setup invocation logic for after initial deployment\n    STELLAR_ACCOUNT=admin fund --to admin --amount 100\n"""\n\n[production.contracts.my_contract]\nid = "C..."                        # Contract ID for production/staging\nclient = true                      # Generate TypeScript client\n'})}),"\n",(0,i.jsx)(e.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,i.jsxs)(e.h4,{id:"client-boolean-default-true",children:[(0,i.jsx)(e.code,{children:"client"})," (boolean, default: true)"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Controls whether a TypeScript client package is generated for this contract"}),"\n",(0,i.jsxs)(e.li,{children:["Set to ",(0,i.jsx)(e.code,{children:"false"})," to skip client generation for utility contracts"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:"[development.contracts.my_contract]\nclient = false  # Skip TypeScript client generation\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"id-string-optional",children:[(0,i.jsx)(e.code,{children:"id"})," (string, optional)"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Specifies a fixed contract ID for the contract"}),"\n",(0,i.jsx)(e.li,{children:"Required in production/staging environments"}),"\n",(0,i.jsx)(e.li,{children:"Must be a valid Stellar contract ID"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:'[production.contracts.my_contract]\nid = "C..."  # Use specific contract ID\n'})}),"\n",(0,i.jsxs)(e.h4,{id:"constructor_args-string-optional",children:[(0,i.jsx)(e.code,{children:"constructor_args"})," (string, optional)"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Arguments passed to contract constructor during deployment"}),"\n",(0,i.jsx)(e.li,{children:"Executes as part of the deployment transaction"}),"\n",(0,i.jsx)(e.li,{children:"Single line of space-separated arguments"}),"\n",(0,i.jsxs)(e.li,{children:["Can use ",(0,i.jsx)(e.code,{children:"STELLAR_ACCOUNT=<alias>"})," to specify the deployer account"]}),"\n",(0,i.jsxs)(e.li,{children:["Supports command substitution with ",(0,i.jsx)(e.code,{children:"$(command)"})]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:'[development.contracts.my_contract]\nconstructor_args = "--arg1 1000 --account $(stellar keys address admin)"  # Basic args\n\n# With specific deployer account\nconstructor_args = "STELLAR_ACCOUNT=admin --arg1 value1 --arg2 value2"\n\n# With command substitution\nconstructor_args = "--account1 $(stellar keys address user1) --account2 $(stellar keys address user2)"\n'})}),"\n",(0,i.jsxs)(e.h4,{id:"after_deploy-string-optional",children:[(0,i.jsx)(e.code,{children:"after_deploy"})," (string, optional)"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Initialization script to run after contract deployment"}),"\n",(0,i.jsx)(e.li,{children:"Only runs in development/testing environments"}),"\n",(0,i.jsx)(e.li,{children:"Supports multiple commands on separate lines"}),"\n",(0,i.jsxs)(e.li,{children:["Can use ",(0,i.jsx)(e.code,{children:"STELLAR_ACCOUNT=<alias>"})," to specify the source account"]}),"\n",(0,i.jsxs)(e.li,{children:["Supports command substitution with ",(0,i.jsx)(e.code,{children:"$(command)"})]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:'[development.contracts.my_contract]\nafter_deploy = """\n# Basic initialization\ninitialize --param1 value1 --param2 value2\n\n# Use specific account\nSTELLAR_ACCOUNT=admin set_admin --admin "new_admin"\n\n# Command substitution\nset_value --value "$(stellar keys address admin)"\n\n# Multiple operations\ncreate_pool --name "Pool A"\nadd_liquidity --amount 1000\nset_fee_rate --rate 0.003\n"""\n'})}),"\n",(0,i.jsx)(e.h3,{id:"example-configurations",children:"Example Configurations"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-toml",children:'# Token contract with constructor args\n[development.contracts.token]\nclient = true\nconstructor_args = "--name Token --symbol TKN --decimals 8"\n\n# Contract deployed by admin with dynamic arguments\n[development.contracts.marketplace]\nclient = true\nconstructor_args = "STELLAR_ACCOUNT=admin --treasury-account $(stellar keys address treasury)"\n\n# Contract with both constructor args and after_deploy script\n[development.contracts.game]\nclient = true\nconstructor_args = "STELLAR_ACCOUNT=admin --name GameV1 --start 1000"\nafter_deploy = """\n    # Additional setup after deployment\n    add_player --address "$(stellar keys address player1)"\n    set_difficulty --difficulty 3\n"""\n\n# Production environment with fixed contract ID\n[production.contracts.token]\nclient = true\nid = "CC5YYARE2TSLA..."  # Must be valid contract ID\n\n# Utility contract without client generation\n[development.contracts.utils]\nclient = false\n\n# Complex initialization with multiple accounts\n[development.contracts.marketplace]\nclient = true\nafter_deploy = """\n    # Set up admin\n    STELLAR_ACCOUNT=admin set_admin_account --account "$(stellar keys address admin)"\n\n    # Configure fees\n    STELLAR_ACCOUNT=admin set_fee_rate --rate 250\n\n    # Add initial listing\n    STELLAR_ACCOUNT=seller create_listing --name "Item A" --price 1000\n"""\n'})}),"\n",(0,i.jsx)(e.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"STELLAR_SCAFFOLD_ENV"}),": Set the current environment (development/testing/staging/production)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"STELLAR_ACCOUNT"}),": Default account for transactions (set automatically)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"STELLAR_RPC_URL"}),": RPC endpoint URL (set from network config)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"STELLAR_NETWORK_PASSPHRASE"}),": Network passphrase (set from network config)"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["Create ",(0,i.jsx)(e.code,{children:"environments.toml"})," in your project root"]}),"\n",(0,i.jsx)(e.li,{children:"Configure environments, networks, and contracts"}),"\n",(0,i.jsxs)(e.li,{children:["Set ",(0,i.jsx)(e.code,{children:"STELLAR_SCAFFOLD_ENV"})," to choose environment"]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.code,{children:"stellar scaffold build"})," or ",(0,i.jsx)(e.code,{children:"stellar scaffold watch"})," to deploy and generate clients"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>c});var o=t(6540);const i={},r=o.createContext(i);function a(n){const e=o.useContext(r);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);